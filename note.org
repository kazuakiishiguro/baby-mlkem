* Notes
** Benchmarks
*** =random_bytes=
**** Regular C code implementation
#+begin_src c
 void randombytes(uint8_t *out, size_t outlen) {
  FILE *f = fopen("/dev/urandom", "rb");
  if (!f) {
    arc4random_buf(out, outlen);
    return;
  }
  size_t ret = fread(out, 1, outlen, f);
  if (!ret) {
    fprintf(stderr, "fread() failed: %zu\n", ret);
    exit(EXIT_FAILURE);
  }
  fclose(f);
}
#+end_src
***** Result
#+begin_src bash
 gcc bench-random.c random.c && ./a.out
 ----------------------------------------
 Total elapsed time:       12.8768 seconds
 Average time per call:    12876.77 nanoseconds
 Throughput:               77659 calls/second
 ----------------------------------------
#+end_src
**** Assembly
Optimized assembly
#+begin_src asm
section .text
global randombytes

randombytes:
	;; rdi: buffer pointer
	;; rsi: buffer length
	mov eax, 318		; syscall number for getrandom
	xor edx, edx		; flags = 0
	syscall

	;; exit(1) if getrandom did not fill the entire buffer
	cmp rax, rsi
	jne .Lerror
	ret

.Lerror:
	mov edi, 1 		; exit status
	mov eax, 60 		; syscall number for exit
	syscall

#+end_src
***** Result
#+begin_src bash
 nasm -f elf64 -o random.o random.s
 gcc bench-random.c random.o && ./a.out
 ----------------------------------------
 Total elapsed time:       0.2994 seconds
 Average time per call:    299.44 nanoseconds
 Throughput:               3339512 calls/second
 ----------------------------------------
#+end_src
